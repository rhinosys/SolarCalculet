name: process_data

permissions:
  contents: read
  actions: write

on:
  workflow_dispatch:
    inputs:
      file_source:
        description: 'Source du fichier CSV (URL HTTP ou chemin dans le dépôt)'
        required: true
        type: string
        default: 'Data/Enedis_input.csv'
      source_type:
        description: 'Type de source (http ou repo)'
        required: true
        type: choice
        options:
          - http
          - repo
        default: 'repo'
      output_prefix:
        description: 'Préfixe pour les fichiers de sortie (optionnel)'
        required: false
        type: string
        default: ''
      validate_only:
        description: 'Uniquement valider le fichier sans générer les XLSX'
        required: false
        type: boolean
        default: false

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      file_source: ${{ steps.check-inputs.outputs.file_source }}
      source_type: ${{ steps.check-inputs.outputs.source_type }}
      output_prefix: ${{ steps.check-inputs.outputs.output_prefix }}
    steps:
      - id: check-inputs
        run: |
          if [[ "${{ github.event.inputs.source_type }}" == "http" && ! "${{ github.event.inputs.file_source }}" =~ ^https?:// ]]; then
            echo "::error::L'URL doit commencer par http:// ou https://"
            exit 1
          fi
          echo "file_source=${{ github.event.inputs.file_source }}" >> $GITHUB_OUTPUT
          echo "source_type=${{ github.event.inputs.source_type }}" >> $GITHUB_OUTPUT
          echo "output_prefix=${{ github.event.inputs.output_prefix }}" >> $GITHUB_OUTPUT

  process:
    needs: validate-inputs
    runs-on: ubuntu-latest
    env:
      FILE_SOURCE: ${{ needs.validate-inputs.outputs.file_source }}
      SOURCE_TYPE: ${{ needs.validate-inputs.outputs.source_type }}
      OUTPUT_PREFIX: ${{ needs.validate-inputs.outputs.output_prefix }}
      VALIDATE_ONLY: ${{ github.event.inputs.validate_only }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set input variables
      run: |
        echo "SOURCE_TYPE=${{ github.event.inputs.source_type }}" >> $GITHUB_ENV
        echo "FILE_SOURCE=${{ github.event.inputs.file_source }}" >> $GITHUB_ENV
        echo "OUTPUT_PREFIX=${{ github.event.inputs.output_prefix }}" >> $GITHUB_ENV
        echo "VALIDATE_ONLY=${{ github.event.inputs.validate_only }}" >> $GITHUB_ENV

    - name: Validate file source
      run: |
        if [[ "$SOURCE_TYPE" == "http" && ! "$FILE_SOURCE" =~ ^https?:// ]]; then
          echo "::error::L'URL doit commencer par http:// ou https://"
          exit 1
        fi
        if [[ "$SOURCE_TYPE" == "repo" && ! -f "$FILE_SOURCE" ]]; then
          echo "::error::Le fichier n'existe pas dans le dépôt"
          exit 1
        fi

    - name: Download file if HTTP
      if: env.SOURCE_TYPE == 'http'
      run: |
        mkdir -p data
        curl -L "$FILE_SOURCE" -o data/input.csv
        if ! file data/input.csv | grep -q "CSV text"; then
          echo "::error::Le fichier téléchargé n'est pas un CSV valide"
          exit 1
        fi

    - name: Copy file if from repo
      if: env.SOURCE_TYPE == 'repo'
      run: |
        mkdir -p data
        cp "$FILE_SOURCE" data/input.csv

    - name: Validate CSV format
      id: validate-csv
      run: |
        python - <<EOF
        import pandas as pd
        import sys
        try:
            df = pd.read_csv('data/input.csv', sep=';')
            required_cols = ['Horodate', 'Valeur']
            missing_cols = [col for col in required_cols if col not in df.columns]
            if missing_cols:
                raise ValueError(f'Colonnes manquantes: {missing_cols}')
            print('✅ Format CSV valide')
            with open('csv_info.txt', 'w') as f:
                f.write(f"ROWS={len(df)}\n")
                f.write(f"COLS={','.join(df.columns)}\n")
                f.write(f"START={df['Horodate'].min()}\n")
                f.write(f"END={df['Horodate'].max()}\n")
        except Exception as e:
            print(f'::error::Erreur de validation: {e}', file=sys.stderr)
            sys.exit(1)
        EOF

    - name: Process data
      id: process-data
      if: success() && github.event.inputs.validate_only != 'true'
      run: |
        ARGS=""
        if [[ -n "$OUTPUT_PREFIX" ]]; then
          ARGS="--output-prefix $OUTPUT_PREFIX"
        fi
        python -m solarcalculet data/input.csv $ARGS

    - name: Upload XLSX files
      if: success() && github.event.inputs.validate_only != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: processed-data
        path: |
          ${{ env.OUTPUT_PREFIX }}*.xlsx
        if-no-files-found: error

    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation_report.md